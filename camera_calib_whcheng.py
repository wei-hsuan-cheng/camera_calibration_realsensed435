# -*- coding: utf-8 -*-
"""Camera Calib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/183iqGjTbS6__xdMVXi7OFIaGIs4WaMiI
"""
import cv2
import numpy as np
import os
import glob
# reference: 
# https://learnopencv.com/camera-calibration-using-opencv/
# https://docs.opencv.org/4.x/dc/dbb/tutorial_py_calibration.html

# Defining the dimensions of checkerboard
# rows: 7 square
# cols: 9 square
# one square: 2.25cm * 2.25cm
# set CHECKBOARD size with the number of corners
CHECKERBOARD = (6, 8)
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# Image path (only chekerboard):
path = './Camera_Calib/frames/*.png'
# Image path (with another object):
path2 = './Camera_Calib/frames_extra/*.png'
# Undistort result path:
path_out = './Camera_Calib/frames_undistorted_whcheng/undistorted_{}.png'


# Creating vector to store vectors of 3D points for each checkerboard image
objpoints = []
# Creating vector to store vectors of 2D points for each checkerboard image
imgpoints = []


# Defining the world coordinates for 3D points
objp = np.zeros((1, CHECKERBOARD[0] * CHECKERBOARD[1], 3), np.float32)
objp[0,:,:2] = np.mgrid[0:CHECKERBOARD[0], 0:CHECKERBOARD[1]].T.reshape(-1, 2)
prev_img_shape = None

# Extracting path of individual image stored in a given directory

images = glob.glob(path)

for fname in images:
    img = cv2.imread(fname)
    print(fname)
    # img = cv2.resize(img, (532, 300), interpolation=cv2.INTER_CUBIC)
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    # Find the chess board corners
    # If desired number of corners are found in the image then ret = true
    ret, corners = cv2.findChessboardCorners(gray, CHECKERBOARD, cv2.CALIB_CB_ADAPTIVE_THRESH + cv2.CALIB_CB_FAST_CHECK + cv2.CALIB_CB_NORMALIZE_IMAGE)
    
    """
    If desired number of corner are detected,
    we refine the pixel coordinates and display 
    them on the images of checker board
    """
    if ret == True:
        objpoints.append(objp)
        # refining pixel coordinates for given 2d points.
        corners2 = cv2.cornerSubPix(gray, corners, (11,11),(-1,-1), criteria)
        
        imgpoints.append(corners2)

        # Draw and display the corners
        img = cv2.drawChessboardCorners(img, CHECKERBOARD, corners2, ret)    
        cv2.imshow("checkerboard img", img)
        cv2.waitKey(0)

h,w = img.shape[:2]

"""
Performing camera calibration by 
passing the value of known 3D points (objpoints)
and corresponding pixel coordinates of the 
detected corners (imgpoints)
"""
ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

print(f"Frame size: \n{gray.shape[::-1]}\n")
print(f"Camera matrix: \n{mtx}\n")
print(f"dist: \n{dist}\n")
print(f"rvecs: \n{rvecs}\n")
print(f"tvecs: \n{tvecs}\n")


"""
Undistort the images using cv.undistort();
"""
num = 0
images = glob.glob(path2)
for fname in images:    
    img = cv2.imread(fname)
    # img = cv2.resize(img, (532, 300), interpolation=cv2.INTER_CUBIC)
    h, w = img.shape[:2]
    newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))
    # undistort
    dst = cv2.undistort(img, mtx, dist, None, newcameramtx)

    # crop the image
    x, y, w, h = roi
    dst = dst[y:y+h, x:x+w]

    cv2.imshow("undistorted img", dst)
    cv2.waitKey(0)
    cv2.imwrite(path_out.format(num), dst)
    num += 1

# mean re-projection error
mean_error = 0
for i in range(len(objpoints)):
    imgpoints2, _ = cv2.projectPoints(objpoints[i], rvecs[i], tvecs[i], mtx, dist)
    error = cv2.norm(imgpoints[i], imgpoints2, cv2.NORM_L2)/len(imgpoints2)
    mean_error += error
print( "total error: {}".format(mean_error/len(objpoints)) )